CREATE DATABASE IF NOT EXISTS DAYSTAR_DAYCARE;

USE DAYSTAR_DAYCARE;

-- Users table for authentication
CREATE TABLE IF NOT EXISTS USERS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    PASSWORD_HASH VARCHAR(255) NOT NULL,
    ROLE ENUM('admin', 'parent', 'staff') NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Parents/Guardians table
CREATE TABLE IF NOT EXISTS PARENTS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_ID INT,
    FIRST_NAME VARCHAR(100) NOT NULL,
    LAST_NAME VARCHAR(100) NOT NULL,
    PHONE VARCHAR(20) NOT NULL,
    ADDRESS TEXT,
    EMERGENCY_CONTACT VARCHAR(20),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

-- Children table
CREATE TABLE IF NOT EXISTS CHILDREN (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    PARENT_ID INT NOT NULL,
    FIRST_NAME VARCHAR(100) NOT NULL,
    LAST_NAME VARCHAR(100) NOT NULL,
    DATE_OF_BIRTH DATE NOT NULL,
    GENDER ENUM('male', 'female', 'other') NOT NULL,
    ALLERGIES TEXT,
    SPECIAL_NEEDS TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (PARENT_ID) REFERENCES PARENTS(ID)
);

-- Babysitters table
CREATE TABLE IF NOT EXISTS BABYSITTERS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_ID INT,
    FIRST_NAME VARCHAR(100) NOT NULL,
    LAST_NAME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(255) UNIQUE NOT NULL,
    PHONE VARCHAR(20) NOT NULL,
    ADDRESS TEXT,
    EXPERIENCE_YEARS INT,
    QUALIFICATIONS TEXT,
    HOURLY_RATE DECIMAL(10, 2),
    AVAILABILITY JSON,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

-- Attendance records
CREATE TABLE IF NOT EXISTS ATTENDANCE (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CHILD_ID INT NOT NULL,
    BABYSITTER_ID INT NOT NULL,
    DATE DATE NOT NULL,
    CHECK_IN TIME,
    CHECK_OUT TIME,
    NOTES TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (CHILD_ID) REFERENCES CHILDREN(ID),
    FOREIGN KEY (BABYSITTER_ID) REFERENCES BABYSITTERS(ID)
);

-- Incidents table
CREATE TABLE IF NOT EXISTS INCIDENTS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CHILD_ID INT NOT NULL,
    BABYSITTER_ID INT NOT NULL,
    INCIDENT_TYPE ENUM('injury', 'behavior', 'medical', 'other') NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    SEVERITY ENUM('low', 'medium', 'high') NOT NULL,
    ACTION_TAKEN TEXT,
    REPORTED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (CHILD_ID) REFERENCES CHILDREN(ID),
    FOREIGN KEY (BABYSITTER_ID) REFERENCES BABYSITTERS(ID)
);

-- Financial records
CREATE TABLE IF NOT EXISTS FINANCIAL_RECORDS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    PARENT_ID INT NOT NULL,
    CHILD_ID INT NOT NULL,
    AMOUNT DECIMAL(10, 2) NOT NULL,
    PAYMENT_TYPE ENUM('monthly_fee', 'late_fee', 'special_service', 'other') NOT NULL,
    STATUS ENUM('pending', 'paid', 'overdue') NOT NULL,
    DUE_DATE DATE,
    PAID_DATE DATE,
    NOTES TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (PARENT_ID) REFERENCES PARENTS(ID),
    FOREIGN KEY (CHILD_ID) REFERENCES CHILDREN(ID)
);

-- Notifications table
CREATE TABLE IF NOT EXISTS NOTIFICATIONS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_ID INT NOT NULL,
    TITLE VARCHAR(255) NOT NULL,
    MESSAGE TEXT NOT NULL,
    TYPE ENUM('payment', 'incident', 'attendance', 'system') NOT NULL,
    IS_READ BOOLEAN DEFAULT FALSE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);