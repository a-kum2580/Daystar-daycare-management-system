-- Create database
CREATE DATABASE IF NOT EXISTS DAYSTAR_DAYCARE;

USE DAYSTAR_DAYCARE;

-- Users table
CREATE TABLE IF NOT EXISTS USERS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USERNAME VARCHAR(50) NOT NULL UNIQUE,
    PASSWORD VARCHAR(255) NOT NULL,
    ROLE ENUM('manager', 'babysitter') NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Babysitters table
CREATE TABLE IF NOT EXISTS BABYSITTERS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100),
    PHONE VARCHAR(20) NOT NULL,
    NIN VARCHAR(20) NOT NULL UNIQUE,
    AGE INT NOT NULL,
    NEXT_OF_KIN_CONTACT VARCHAR(100) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Parents/Guardians table
CREATE TABLE IF NOT EXISTS PARENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100),
    PHONE VARCHAR(20) NOT NULL,
    ADDRESS TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Children table
CREATE TABLE IF NOT EXISTS CHILDREN (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    DATE_OF_BIRTH DATE NOT NULL,
    PARENT_ID INT NOT NULL,
    SPECIAL_NEEDS TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PARENT_ID) REFERENCES PARENTS(ID)
);

-- Child Attendance table
CREATE TABLE IF NOT EXISTS CHILD_ATTENDANCE (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CHILD_ID INT NOT NULL,
    BABYSITTER_ID INT NOT NULL,
    DATE DATE NOT NULL,
    SESSION_TYPE ENUM('half-day', 'full-day') NOT NULL,
    CHECK_IN_TIME TIMESTAMP,
    CHECK_OUT_TIME TIMESTAMP,
    FOREIGN KEY (CHILD_ID) REFERENCES CHILDREN(ID),
    FOREIGN KEY (BABYSITTER_ID) REFERENCES BABYSITTERS(ID)
);

-- Financial Records table
CREATE TABLE IF NOT EXISTS FINANCIAL_RECORDS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    TYPE ENUM('income', 'expense') NOT NULL,
    CATEGORY VARCHAR(50) NOT NULL,
    AMOUNT DECIMAL(10, 2) NOT NULL,
    DESCRIPTION TEXT,
    DATE DATE NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Incidents table
CREATE TABLE IF NOT EXISTS INCIDENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CHILD_ID INT NOT NULL,
    BABYSITTER_ID INT NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    SEVERITY ENUM('low', 'medium', 'high') NOT NULL,
    DATE DATE NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (CHILD_ID) REFERENCES CHILDREN(ID),
    FOREIGN KEY (BABYSITTER_ID) REFERENCES BABYSITTERS(ID)
);

-- Babysitter Payments table
CREATE TABLE IF NOT EXISTS BABYSITTER_PAYMENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    BABYSITTER_ID INT NOT NULL,
    AMOUNT DECIMAL(10, 2) NOT NULL,
    DATE DATE NOT NULL,
    STATUS ENUM('pending', 'paid') DEFAULT 'pending',
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (BABYSITTER_ID) REFERENCES BABYSITTERS(ID)
);

-- Budget Categories table
CREATE TABLE IF NOT EXISTS BUDGET_CATEGORIES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(50) NOT NULL,
    MONTHLY_BUDGET DECIMAL(10, 2) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Notifications table
CREATE TABLE IF NOT EXISTS NOTIFICATIONS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    TYPE VARCHAR(50) NOT NULL,
    MESSAGE TEXT NOT NULL,
    IS_READ BOOLEAN DEFAULT FALSE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);