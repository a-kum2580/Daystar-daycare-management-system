{"ast":null,"code":"import { useState } from \"react\";\n/**\n * A custom hook for managing both controlled and uncontrolled component states.\n *\n * @example\n *   // Uncontrolled usage\n *   const [value, setValue] = useControlledValue(0, undefined);\n *\n *   // Controlled usage\n *   const [value, setValue] = useControlledValue(0, props.value);\n *\n * @template T - The type of the value.\n * @param {T} defaultValue - The initial value for the uncontrolled state.\n * @param {T | undefined} controlledValue - The value for the controlled state.\n *   If undefined, the component will use the uncontrolled state.\n * @returns {[T, DispatchStateAction<T>]} - Returns a tuple where the first\n *   element is the current value (either controlled or uncontrolled) and the\n *   second element is a setter function to update the value.\n */\nexport function useControlledValue(defaultValue, controlledValue) {\n  const [uncontrolledValue, setValue] = useState(defaultValue);\n  const value = controlledValue === undefined ? uncontrolledValue : controlledValue;\n  return [value, setValue];\n}","map":{"version":3,"names":["useState","useControlledValue","defaultValue","controlledValue","uncontrolledValue","setValue","value","undefined"],"sources":["C:/Users/JOSEPH/Desktop/web/node_modules/react-day-picker/dist/esm/helpers/useControlledValue.js"],"sourcesContent":["import { useState } from \"react\";\n/**\n * A custom hook for managing both controlled and uncontrolled component states.\n *\n * @example\n *   // Uncontrolled usage\n *   const [value, setValue] = useControlledValue(0, undefined);\n *\n *   // Controlled usage\n *   const [value, setValue] = useControlledValue(0, props.value);\n *\n * @template T - The type of the value.\n * @param {T} defaultValue - The initial value for the uncontrolled state.\n * @param {T | undefined} controlledValue - The value for the controlled state.\n *   If undefined, the component will use the uncontrolled state.\n * @returns {[T, DispatchStateAction<T>]} - Returns a tuple where the first\n *   element is the current value (either controlled or uncontrolled) and the\n *   second element is a setter function to update the value.\n */\nexport function useControlledValue(defaultValue, controlledValue) {\n    const [uncontrolledValue, setValue] = useState(defaultValue);\n    const value = controlledValue === undefined ? uncontrolledValue : controlledValue;\n    return [value, setValue];\n}\n//# sourceMappingURL=useControlledValue.js.map"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,YAAY,EAAEC,eAAe,EAAE;EAC9D,MAAM,CAACC,iBAAiB,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAACE,YAAY,CAAC;EAC5D,MAAMI,KAAK,GAAGH,eAAe,KAAKI,SAAS,GAAGH,iBAAiB,GAAGD,eAAe;EACjF,OAAO,CAACG,KAAK,EAAED,QAAQ,CAAC;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}