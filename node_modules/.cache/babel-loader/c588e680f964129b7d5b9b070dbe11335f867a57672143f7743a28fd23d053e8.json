{"ast":null,"code":"import { defaultDateLib } from \"../classes/DateLib.js\";\nimport { rangeIncludesDate } from \"./rangeIncludesDate.js\";\nimport { isDateAfterType, isDateBeforeType, isDateInterval, isDateRange, isDatesArray, isDayOfWeekType } from \"./typeguards.js\";\n/**\n * Returns whether a day matches against at least one of the given\n * {@link Matcher}.\n *\n * ```tsx\n * const date = new Date(2022, 5, 19);\n * const matcher1: DateRange = {\n *   from: new Date(2021, 12, 21),\n *   to: new Date(2021, 12, 30)\n * };\n * const matcher2: DateRange = {\n *   from: new Date(2022, 5, 1),\n *   to: new Date(2022, 5, 23)\n * };\n * dateMatchModifiers(date, [matcher1, matcher2]); // true, since day is in the matcher1 range.\n * ```\n *\n * @group Utilities\n */\nexport function dateMatchModifiers(date, matchers, dateLib = defaultDateLib) {\n  const matchersArr = !Array.isArray(matchers) ? [matchers] : matchers;\n  const {\n    isSameDay,\n    differenceInCalendarDays,\n    isAfter\n  } = dateLib;\n  return matchersArr.some(matcher => {\n    if (typeof matcher === \"boolean\") {\n      return matcher;\n    }\n    if (dateLib.isDate(matcher)) {\n      return isSameDay(date, matcher);\n    }\n    if (isDatesArray(matcher, dateLib)) {\n      return matcher.includes(date);\n    }\n    if (isDateRange(matcher)) {\n      return rangeIncludesDate(matcher, date, false, dateLib);\n    }\n    if (isDayOfWeekType(matcher)) {\n      if (!Array.isArray(matcher.dayOfWeek)) {\n        return matcher.dayOfWeek === date.getDay();\n      }\n      return matcher.dayOfWeek.includes(date.getDay());\n    }\n    if (isDateInterval(matcher)) {\n      const diffBefore = differenceInCalendarDays(matcher.before, date);\n      const diffAfter = differenceInCalendarDays(matcher.after, date);\n      const isDayBefore = diffBefore > 0;\n      const isDayAfter = diffAfter < 0;\n      const isClosedInterval = isAfter(matcher.before, matcher.after);\n      if (isClosedInterval) {\n        return isDayAfter && isDayBefore;\n      } else {\n        return isDayBefore || isDayAfter;\n      }\n    }\n    if (isDateAfterType(matcher)) {\n      return differenceInCalendarDays(date, matcher.after) > 0;\n    }\n    if (isDateBeforeType(matcher)) {\n      return differenceInCalendarDays(matcher.before, date) > 0;\n    }\n    if (typeof matcher === \"function\") {\n      return matcher(date);\n    }\n    return false;\n  });\n}\n/**\n * @private\n * @deprecated Use {@link dateMatchModifiers} instead.\n */\nexport const isMatch = dateMatchModifiers;","map":{"version":3,"names":["defaultDateLib","rangeIncludesDate","isDateAfterType","isDateBeforeType","isDateInterval","isDateRange","isDatesArray","isDayOfWeekType","dateMatchModifiers","date","matchers","dateLib","matchersArr","Array","isArray","isSameDay","differenceInCalendarDays","isAfter","some","matcher","isDate","includes","dayOfWeek","getDay","diffBefore","before","diffAfter","after","isDayBefore","isDayAfter","isClosedInterval","isMatch"],"sources":["C:/Users/JOSEPH/Desktop/web/node_modules/react-day-picker/dist/esm/utils/dateMatchModifiers.js"],"sourcesContent":["import { defaultDateLib } from \"../classes/DateLib.js\";\nimport { rangeIncludesDate } from \"./rangeIncludesDate.js\";\nimport { isDateAfterType, isDateBeforeType, isDateInterval, isDateRange, isDatesArray, isDayOfWeekType } from \"./typeguards.js\";\n/**\n * Returns whether a day matches against at least one of the given\n * {@link Matcher}.\n *\n * ```tsx\n * const date = new Date(2022, 5, 19);\n * const matcher1: DateRange = {\n *   from: new Date(2021, 12, 21),\n *   to: new Date(2021, 12, 30)\n * };\n * const matcher2: DateRange = {\n *   from: new Date(2022, 5, 1),\n *   to: new Date(2022, 5, 23)\n * };\n * dateMatchModifiers(date, [matcher1, matcher2]); // true, since day is in the matcher1 range.\n * ```\n *\n * @group Utilities\n */\nexport function dateMatchModifiers(date, matchers, dateLib = defaultDateLib) {\n    const matchersArr = !Array.isArray(matchers) ? [matchers] : matchers;\n    const { isSameDay, differenceInCalendarDays, isAfter } = dateLib;\n    return matchersArr.some((matcher) => {\n        if (typeof matcher === \"boolean\") {\n            return matcher;\n        }\n        if (dateLib.isDate(matcher)) {\n            return isSameDay(date, matcher);\n        }\n        if (isDatesArray(matcher, dateLib)) {\n            return matcher.includes(date);\n        }\n        if (isDateRange(matcher)) {\n            return rangeIncludesDate(matcher, date, false, dateLib);\n        }\n        if (isDayOfWeekType(matcher)) {\n            if (!Array.isArray(matcher.dayOfWeek)) {\n                return matcher.dayOfWeek === date.getDay();\n            }\n            return matcher.dayOfWeek.includes(date.getDay());\n        }\n        if (isDateInterval(matcher)) {\n            const diffBefore = differenceInCalendarDays(matcher.before, date);\n            const diffAfter = differenceInCalendarDays(matcher.after, date);\n            const isDayBefore = diffBefore > 0;\n            const isDayAfter = diffAfter < 0;\n            const isClosedInterval = isAfter(matcher.before, matcher.after);\n            if (isClosedInterval) {\n                return isDayAfter && isDayBefore;\n            }\n            else {\n                return isDayBefore || isDayAfter;\n            }\n        }\n        if (isDateAfterType(matcher)) {\n            return differenceInCalendarDays(date, matcher.after) > 0;\n        }\n        if (isDateBeforeType(matcher)) {\n            return differenceInCalendarDays(matcher.before, date) > 0;\n        }\n        if (typeof matcher === \"function\") {\n            return matcher(date);\n        }\n        return false;\n    });\n}\n/**\n * @private\n * @deprecated Use {@link dateMatchModifiers} instead.\n */\nexport const isMatch = dateMatchModifiers;\n//# sourceMappingURL=dateMatchModifiers.js.map"],"mappings":"AAAA,SAASA,cAAc,QAAQ,uBAAuB;AACtD,SAASC,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,eAAe,EAAEC,gBAAgB,EAAEC,cAAc,EAAEC,WAAW,EAAEC,YAAY,EAAEC,eAAe,QAAQ,iBAAiB;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,GAAGX,cAAc,EAAE;EACzE,MAAMY,WAAW,GAAG,CAACC,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAAC,GAAG,CAACA,QAAQ,CAAC,GAAGA,QAAQ;EACpE,MAAM;IAAEK,SAAS;IAAEC,wBAAwB;IAAEC;EAAQ,CAAC,GAAGN,OAAO;EAChE,OAAOC,WAAW,CAACM,IAAI,CAAEC,OAAO,IAAK;IACjC,IAAI,OAAOA,OAAO,KAAK,SAAS,EAAE;MAC9B,OAAOA,OAAO;IAClB;IACA,IAAIR,OAAO,CAACS,MAAM,CAACD,OAAO,CAAC,EAAE;MACzB,OAAOJ,SAAS,CAACN,IAAI,EAAEU,OAAO,CAAC;IACnC;IACA,IAAIb,YAAY,CAACa,OAAO,EAAER,OAAO,CAAC,EAAE;MAChC,OAAOQ,OAAO,CAACE,QAAQ,CAACZ,IAAI,CAAC;IACjC;IACA,IAAIJ,WAAW,CAACc,OAAO,CAAC,EAAE;MACtB,OAAOlB,iBAAiB,CAACkB,OAAO,EAAEV,IAAI,EAAE,KAAK,EAAEE,OAAO,CAAC;IAC3D;IACA,IAAIJ,eAAe,CAACY,OAAO,CAAC,EAAE;MAC1B,IAAI,CAACN,KAAK,CAACC,OAAO,CAACK,OAAO,CAACG,SAAS,CAAC,EAAE;QACnC,OAAOH,OAAO,CAACG,SAAS,KAAKb,IAAI,CAACc,MAAM,CAAC,CAAC;MAC9C;MACA,OAAOJ,OAAO,CAACG,SAAS,CAACD,QAAQ,CAACZ,IAAI,CAACc,MAAM,CAAC,CAAC,CAAC;IACpD;IACA,IAAInB,cAAc,CAACe,OAAO,CAAC,EAAE;MACzB,MAAMK,UAAU,GAAGR,wBAAwB,CAACG,OAAO,CAACM,MAAM,EAAEhB,IAAI,CAAC;MACjE,MAAMiB,SAAS,GAAGV,wBAAwB,CAACG,OAAO,CAACQ,KAAK,EAAElB,IAAI,CAAC;MAC/D,MAAMmB,WAAW,GAAGJ,UAAU,GAAG,CAAC;MAClC,MAAMK,UAAU,GAAGH,SAAS,GAAG,CAAC;MAChC,MAAMI,gBAAgB,GAAGb,OAAO,CAACE,OAAO,CAACM,MAAM,EAAEN,OAAO,CAACQ,KAAK,CAAC;MAC/D,IAAIG,gBAAgB,EAAE;QAClB,OAAOD,UAAU,IAAID,WAAW;MACpC,CAAC,MACI;QACD,OAAOA,WAAW,IAAIC,UAAU;MACpC;IACJ;IACA,IAAI3B,eAAe,CAACiB,OAAO,CAAC,EAAE;MAC1B,OAAOH,wBAAwB,CAACP,IAAI,EAAEU,OAAO,CAACQ,KAAK,CAAC,GAAG,CAAC;IAC5D;IACA,IAAIxB,gBAAgB,CAACgB,OAAO,CAAC,EAAE;MAC3B,OAAOH,wBAAwB,CAACG,OAAO,CAACM,MAAM,EAAEhB,IAAI,CAAC,GAAG,CAAC;IAC7D;IACA,IAAI,OAAOU,OAAO,KAAK,UAAU,EAAE;MAC/B,OAAOA,OAAO,CAACV,IAAI,CAAC;IACxB;IACA,OAAO,KAAK;EAChB,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMsB,OAAO,GAAGvB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}