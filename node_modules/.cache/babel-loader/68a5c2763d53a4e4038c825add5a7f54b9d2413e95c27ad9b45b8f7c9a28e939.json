{"ast":null,"code":"import api from './api.config';\nconst authService = {\n  login: async credentials => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('isAuthenticated', 'true');\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Login failed'\n      };\n    }\n  },\n  register: async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Registration failed'\n      };\n    }\n  },\n  forgotPassword: async email => {\n    try {\n      const response = await api.post('/auth/forgot-password', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        message: 'Password reset request failed'\n      };\n    }\n  },\n  resetPassword: async (token, newPassword) => {\n    try {\n      const response = await api.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        message: 'Password reset failed'\n      };\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('isAuthenticated');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  isAuthenticated: () => {\n    return localStorage.getItem('isAuthenticated') === 'true';\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","login","credentials","response","post","data","token","localStorage","setItem","JSON","stringify","user","error","_error$response","message","register","userData","_error$response2","forgotPassword","email","_error$response3","resetPassword","newPassword","_error$response4","logout","removeItem","getCurrentUser","getItem","parse","isAuthenticated"],"sources":["C:/Users/JOSEPH/Desktop/allan/web programming/web/src/services/authService.js"],"sourcesContent":["import api from './api.config';\r\n\r\nconst authService = {\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await api.post('/auth/login', credentials);\r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        localStorage.setItem('isAuthenticated', 'true');\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Login failed' };\r\n    }\r\n  },\r\n\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await api.post('/auth/register', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Registration failed' };\r\n    }\r\n  },\r\n\r\n  forgotPassword: async (email) => {\r\n    try {\r\n      const response = await api.post('/auth/forgot-password', { email });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Password reset request failed' };\r\n    }\r\n  },\r\n\r\n  resetPassword: async (token, newPassword) => {\r\n    try {\r\n      const response = await api.post('/auth/reset-password', { token, newPassword });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Password reset failed' };\r\n    }\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('isAuthenticated');\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    return localStorage.getItem('isAuthenticated') === 'true';\r\n  }\r\n};\r\n\r\nexport default authService; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,cAAc;AAE9B,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,aAAa,EAAEF,WAAW,CAAC;MAC3D,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;QACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;QAClDC,YAAY,CAACC,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC;QAC/CD,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACM,IAAI,CAAC,CAAC;MAClE;MACA,OAAOR,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;MAAA,IAAAC,eAAA;MACd,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACT,QAAQ,cAAAU,eAAA,uBAAdA,eAAA,CAAgBR,IAAI,KAAI;QAAES,OAAO,EAAE;MAAe,CAAC;IAC3D;EACF,CAAC;EAEDC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,gBAAgB,EAAEY,QAAQ,CAAC;MAC3D,OAAOb,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;MAAA,IAAAK,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAL,KAAK,CAACT,QAAQ,cAAAc,gBAAA,uBAAdA,gBAAA,CAAgBZ,IAAI,KAAI;QAAES,OAAO,EAAE;MAAsB,CAAC;IAClE;EACF,CAAC;EAEDI,cAAc,EAAE,MAAOC,KAAK,IAAK;IAC/B,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,uBAAuB,EAAE;QAAEe;MAAM,CAAC,CAAC;MACnE,OAAOhB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;MAAA,IAAAQ,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAR,KAAK,CAACT,QAAQ,cAAAiB,gBAAA,uBAAdA,gBAAA,CAAgBf,IAAI,KAAI;QAAES,OAAO,EAAE;MAAgC,CAAC;IAC5E;EACF,CAAC;EAEDO,aAAa,EAAE,MAAAA,CAAOf,KAAK,EAAEgB,WAAW,KAAK;IAC3C,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,sBAAsB,EAAE;QAAEE,KAAK;QAAEgB;MAAY,CAAC,CAAC;MAC/E,OAAOnB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;MAAA,IAAAW,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAX,KAAK,CAACT,QAAQ,cAAAoB,gBAAA,uBAAdA,gBAAA,CAAgBlB,IAAI,KAAI;QAAES,OAAO,EAAE;MAAwB,CAAC;IACpE;EACF,CAAC;EAEDU,MAAM,EAAEA,CAAA,KAAM;IACZjB,YAAY,CAACkB,UAAU,CAAC,OAAO,CAAC;IAChClB,YAAY,CAACkB,UAAU,CAAC,iBAAiB,CAAC;IAC1ClB,YAAY,CAACkB,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMf,IAAI,GAAGJ,YAAY,CAACoB,OAAO,CAAC,MAAM,CAAC;IACzC,OAAOhB,IAAI,GAAGF,IAAI,CAACmB,KAAK,CAACjB,IAAI,CAAC,GAAG,IAAI;EACvC,CAAC;EAEDkB,eAAe,EAAEA,CAAA,KAAM;IACrB,OAAOtB,YAAY,CAACoB,OAAO,CAAC,iBAAiB,CAAC,KAAK,MAAM;EAC3D;AACF,CAAC;AAED,eAAe3B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}