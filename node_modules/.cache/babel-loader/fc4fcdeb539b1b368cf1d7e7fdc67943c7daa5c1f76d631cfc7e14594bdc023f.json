{"ast":null,"code":"import { defaultDateLib } from \"../classes/DateLib.js\";\nimport { dateMatchModifiers } from \"./dateMatchModifiers.js\";\nimport { rangeContainsDayOfWeek } from \"./rangeContainsDayOfWeek.js\";\nimport { rangeIncludesDate } from \"./rangeIncludesDate.js\";\nimport { rangeOverlaps } from \"./rangeOverlaps.js\";\nimport { isDateAfterType, isDateBeforeType, isDateInterval, isDateRange, isDatesArray, isDayOfWeekType } from \"./typeguards.js\";\n/**\n * Returns whether a range contains dates that match the given modifiers.\n *\n * ```tsx\n * const range: DateRange = {\n *   from: new Date(2021, 12, 21),\n *   to: new Date(2021, 12, 30)\n * };\n * const matcher1: Date = new Date(2021, 12, 21);\n * const matcher2: DateRange = {\n *   from: new Date(2022, 5, 1),\n *   to: new Date(2022, 5, 23)\n * };\n * rangeContainsModifiers(range, [matcher1, matcher2]); // true, since matcher1 is in the date.\n * ```\n *\n * @since 9.2.2\n * @group Utilities\n */\nexport function rangeContainsModifiers(range, modifiers, dateLib = defaultDateLib) {\n  const matchers = Array.isArray(modifiers) ? modifiers : [modifiers];\n  // Defer function matchers evaluation as they are the least performant.\n  const nonFunctionMatchers = matchers.filter(matcher => typeof matcher !== \"function\");\n  const nonFunctionMatchersResult = nonFunctionMatchers.some(matcher => {\n    if (typeof matcher === \"boolean\") return matcher;\n    if (dateLib.isDate(matcher)) {\n      return rangeIncludesDate(range, matcher, false, dateLib);\n    }\n    if (isDatesArray(matcher, dateLib)) {\n      return matcher.some(date => rangeIncludesDate(range, date, false, dateLib));\n    }\n    if (isDateRange(matcher)) {\n      if (matcher.from && matcher.to) {\n        return rangeOverlaps(range, {\n          from: matcher.from,\n          to: matcher.to\n        }, dateLib);\n      }\n      return false;\n    }\n    if (isDayOfWeekType(matcher)) {\n      return rangeContainsDayOfWeek(range, matcher.dayOfWeek, dateLib);\n    }\n    if (isDateInterval(matcher)) {\n      const isClosedInterval = dateLib.isAfter(matcher.before, matcher.after);\n      if (isClosedInterval) {\n        return rangeOverlaps(range, {\n          from: dateLib.addDays(matcher.after, 1),\n          to: dateLib.addDays(matcher.before, -1)\n        }, dateLib);\n      }\n      return dateMatchModifiers(range.from, matcher, dateLib) || dateMatchModifiers(range.to, matcher, dateLib);\n    }\n    if (isDateAfterType(matcher) || isDateBeforeType(matcher)) {\n      return dateMatchModifiers(range.from, matcher, dateLib) || dateMatchModifiers(range.to, matcher, dateLib);\n    }\n    return false;\n  });\n  if (nonFunctionMatchersResult) {\n    return true;\n  }\n  const functionMatchers = matchers.filter(matcher => typeof matcher === \"function\");\n  if (functionMatchers.length) {\n    let date = range.from;\n    const totalDays = dateLib.differenceInCalendarDays(range.to, range.from);\n    for (let i = 0; i <= totalDays; i++) {\n      if (functionMatchers.some(matcher => matcher(date))) {\n        return true;\n      }\n      date = dateLib.addDays(date, 1);\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["defaultDateLib","dateMatchModifiers","rangeContainsDayOfWeek","rangeIncludesDate","rangeOverlaps","isDateAfterType","isDateBeforeType","isDateInterval","isDateRange","isDatesArray","isDayOfWeekType","rangeContainsModifiers","range","modifiers","dateLib","matchers","Array","isArray","nonFunctionMatchers","filter","matcher","nonFunctionMatchersResult","some","isDate","date","from","to","dayOfWeek","isClosedInterval","isAfter","before","after","addDays","functionMatchers","length","totalDays","differenceInCalendarDays","i"],"sources":["C:/Users/JOSEPH/Desktop/web/node_modules/react-day-picker/dist/esm/utils/rangeContainsModifiers.js"],"sourcesContent":["import { defaultDateLib } from \"../classes/DateLib.js\";\nimport { dateMatchModifiers } from \"./dateMatchModifiers.js\";\nimport { rangeContainsDayOfWeek } from \"./rangeContainsDayOfWeek.js\";\nimport { rangeIncludesDate } from \"./rangeIncludesDate.js\";\nimport { rangeOverlaps } from \"./rangeOverlaps.js\";\nimport { isDateAfterType, isDateBeforeType, isDateInterval, isDateRange, isDatesArray, isDayOfWeekType } from \"./typeguards.js\";\n/**\n * Returns whether a range contains dates that match the given modifiers.\n *\n * ```tsx\n * const range: DateRange = {\n *   from: new Date(2021, 12, 21),\n *   to: new Date(2021, 12, 30)\n * };\n * const matcher1: Date = new Date(2021, 12, 21);\n * const matcher2: DateRange = {\n *   from: new Date(2022, 5, 1),\n *   to: new Date(2022, 5, 23)\n * };\n * rangeContainsModifiers(range, [matcher1, matcher2]); // true, since matcher1 is in the date.\n * ```\n *\n * @since 9.2.2\n * @group Utilities\n */\nexport function rangeContainsModifiers(range, modifiers, dateLib = defaultDateLib) {\n    const matchers = Array.isArray(modifiers) ? modifiers : [modifiers];\n    // Defer function matchers evaluation as they are the least performant.\n    const nonFunctionMatchers = matchers.filter((matcher) => typeof matcher !== \"function\");\n    const nonFunctionMatchersResult = nonFunctionMatchers.some((matcher) => {\n        if (typeof matcher === \"boolean\")\n            return matcher;\n        if (dateLib.isDate(matcher)) {\n            return rangeIncludesDate(range, matcher, false, dateLib);\n        }\n        if (isDatesArray(matcher, dateLib)) {\n            return matcher.some((date) => rangeIncludesDate(range, date, false, dateLib));\n        }\n        if (isDateRange(matcher)) {\n            if (matcher.from && matcher.to) {\n                return rangeOverlaps(range, { from: matcher.from, to: matcher.to }, dateLib);\n            }\n            return false;\n        }\n        if (isDayOfWeekType(matcher)) {\n            return rangeContainsDayOfWeek(range, matcher.dayOfWeek, dateLib);\n        }\n        if (isDateInterval(matcher)) {\n            const isClosedInterval = dateLib.isAfter(matcher.before, matcher.after);\n            if (isClosedInterval) {\n                return rangeOverlaps(range, {\n                    from: dateLib.addDays(matcher.after, 1),\n                    to: dateLib.addDays(matcher.before, -1)\n                }, dateLib);\n            }\n            return (dateMatchModifiers(range.from, matcher, dateLib) ||\n                dateMatchModifiers(range.to, matcher, dateLib));\n        }\n        if (isDateAfterType(matcher) || isDateBeforeType(matcher)) {\n            return (dateMatchModifiers(range.from, matcher, dateLib) ||\n                dateMatchModifiers(range.to, matcher, dateLib));\n        }\n        return false;\n    });\n    if (nonFunctionMatchersResult) {\n        return true;\n    }\n    const functionMatchers = matchers.filter((matcher) => typeof matcher === \"function\");\n    if (functionMatchers.length) {\n        let date = range.from;\n        const totalDays = dateLib.differenceInCalendarDays(range.to, range.from);\n        for (let i = 0; i <= totalDays; i++) {\n            if (functionMatchers.some((matcher) => matcher(date))) {\n                return true;\n            }\n            date = dateLib.addDays(date, 1);\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=rangeContainsModifiers.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}