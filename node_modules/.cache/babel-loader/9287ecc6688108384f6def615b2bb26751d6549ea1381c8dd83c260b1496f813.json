{"ast":null,"code":"import { TZDate } from \"@date-fns/tz\";\nimport { addDays, addMonths, addWeeks, addYears, differenceInCalendarDays, differenceInCalendarMonths, eachMonthOfInterval, endOfISOWeek, endOfMonth, endOfWeek, endOfYear, format, getISOWeek, getMonth, getWeek, getYear, isAfter, isBefore, isDate, isSameDay, isSameMonth, isSameYear, max, min, setMonth, setYear, startOfDay, startOfISOWeek, startOfMonth, startOfWeek, startOfYear } from \"date-fns\";\nimport { enUS } from \"date-fns/locale/en-US\";\nimport { endOfBroadcastWeek } from \"../helpers/endOfBroadcastWeek.js\";\nimport { startOfBroadcastWeek } from \"../helpers/startOfBroadcastWeek.js\";\n/**\n * A wrapper class around [date-fns](http://date-fns.org) sharing the same\n * options.\n *\n * @since 9.2.0\n * @example\n *   const dateLib = new DateLib({ locale: es });\n *   const newDate = dateLib.addDays(new Date(), 5);\n */\nexport class DateLib {\n  /**\n   * Creates an instance of DateLib.\n   *\n   * @param options The options for the date library.\n   * @param overrides Overrides for the date library functions.\n   */\n  constructor(options, overrides) {\n    /**\n     * Reference to the built-in Date constructor.\n     *\n     * @deprecated Use `newDate()` or `today()`.\n     */\n    this.Date = Date;\n    /**\n     * Creates a new date object to the today's date.\n     *\n     * @since 9.5.0\n     * @returns The new date object.\n     */\n    this.today = () => {\n      if (this.overrides?.today) {\n        return this.overrides.today();\n      }\n      if (this.options.timeZone) {\n        return TZDate.tz(this.options.timeZone);\n      }\n      return new this.Date();\n    };\n    /**\n     * Creates a new date object with the specified year, month and date.\n     *\n     * @since 9.5.0\n     * @param year The year.\n     * @param monthIndex The month (0-11).\n     * @param date The day of the month.\n     * @returns The new date object.\n     */\n    this.newDate = (year, monthIndex, date) => {\n      if (this.overrides?.newDate) {\n        return this.overrides.newDate(year, monthIndex, date);\n      }\n      if (this.options.timeZone) {\n        return new TZDate(year, monthIndex, date, this.options.timeZone);\n      }\n      return new Date(year, monthIndex, date);\n    };\n    /**\n     * Adds the specified number of days to the given date.\n     *\n     * @param date The date to add days to.\n     * @param amount The number of days to add.\n     * @returns The new date with the days added.\n     */\n    this.addDays = (date, amount) => {\n      return this.overrides?.addDays?.(date, amount) ?? addDays(date, amount);\n    };\n    /**\n     * Adds the specified number of months to the given date.\n     *\n     * @param date The date to add months to.\n     * @param amount The number of months to add.\n     * @returns The new date with the months added.\n     */\n    this.addMonths = (date, amount) => {\n      return this.overrides?.addMonths?.(date, amount) ?? addMonths(date, amount);\n    };\n    /**\n     * Adds the specified number of weeks to the given date.\n     *\n     * @param date The date to add weeks to.\n     * @param amount The number of weeks to add.\n     * @returns The new date with the weeks added.\n     */\n    this.addWeeks = (date, amount) => {\n      return this.overrides?.addWeeks?.(date, amount) ?? addWeeks(date, amount);\n    };\n    /**\n     * Adds the specified number of years to the given date.\n     *\n     * @param date The date to add years to.\n     * @param amount The number of years to add.\n     * @returns The new date with the years added.\n     */\n    this.addYears = (date, amount) => {\n      return this.overrides?.addYears?.(date, amount) ?? addYears(date, amount);\n    };\n    /**\n     * Returns the number of calendar days between the given dates.\n     *\n     * @param dateLeft The later date.\n     * @param dateRight The earlier date.\n     * @returns The number of calendar days between the dates.\n     */\n    this.differenceInCalendarDays = (dateLeft, dateRight) => {\n      return this.overrides?.differenceInCalendarDays?.(dateLeft, dateRight) ?? differenceInCalendarDays(dateLeft, dateRight);\n    };\n    /**\n     * Returns the number of calendar months between the given dates.\n     *\n     * @param dateLeft The later date.\n     * @param dateRight The earlier date.\n     * @returns The number of calendar months between the dates.\n     */\n    this.differenceInCalendarMonths = (dateLeft, dateRight) => {\n      return this.overrides?.differenceInCalendarMonths?.(dateLeft, dateRight) ?? differenceInCalendarMonths(dateLeft, dateRight);\n    };\n    /**\n     * Returns the months between the given dates.\n     *\n     * @param interval The interval to get the months for.\n     */\n    this.eachMonthOfInterval = interval => {\n      return this.overrides?.eachMonthOfInterval?.(interval) ?? eachMonthOfInterval(interval);\n    };\n    /**\n     * Returns the end of the broadcast week for the given date.\n     *\n     * @param date The original date.\n     * @returns The end of the broadcast week.\n     */\n    this.endOfBroadcastWeek = (date, dateLib) => {\n      return this.overrides?.endOfBroadcastWeek?.(date, dateLib) ?? endOfBroadcastWeek(date, this);\n    };\n    /**\n     * Returns the end of the ISO week for the given date.\n     *\n     * @param date The original date.\n     * @returns The end of the ISO week.\n     */\n    this.endOfISOWeek = date => {\n      return this.overrides?.endOfISOWeek?.(date) ?? endOfISOWeek(date);\n    };\n    /**\n     * Returns the end of the month for the given date.\n     *\n     * @param date The original date.\n     * @returns The end of the month.\n     */\n    this.endOfMonth = date => {\n      return this.overrides?.endOfMonth?.(date) ?? endOfMonth(date);\n    };\n    /**\n     * Returns the end of the week for the given date.\n     *\n     * @param date The original date.\n     * @returns The end of the week.\n     */\n    this.endOfWeek = (date, options) => {\n      return this.overrides?.endOfWeek?.(date, options ?? this.options) ?? endOfWeek(date, options ?? this.options);\n    };\n    /**\n     * Returns the end of the year for the given date.\n     *\n     * @param date The original date.\n     * @returns The end of the year.\n     */\n    this.endOfYear = date => {\n      return this.overrides?.endOfYear?.(date) ?? endOfYear(date);\n    };\n    /**\n     * Formats the given date using the specified format string.\n     *\n     * @param date The date to format.\n     * @param formatStr The format string.\n     * @returns The formatted date string.\n     */\n    this.format = (date, formatStr, options) => {\n      const formatted = this.overrides?.format?.(date, formatStr, options ?? this.options) ?? format(date, formatStr, options ?? this.options);\n      if (this.options.numerals && this.options.numerals !== \"latn\") {\n        return this.replaceDigits(formatted);\n      }\n      return formatted;\n    };\n    /**\n     * Returns the ISO week number for the given date.\n     *\n     * @param date The date to get the ISO week number for.\n     * @returns The ISO week number.\n     */\n    this.getISOWeek = date => {\n      return this.overrides?.getISOWeek?.(date) ?? getISOWeek(date);\n    };\n    /**\n     * Returns the month of the given date.\n     *\n     * @param date The date to get the month for.\n     * @returns The month.\n     */\n    this.getMonth = date => {\n      return this.overrides?.getMonth?.(date) ?? getMonth(date);\n    };\n    /**\n     * Returns the year of the given date.\n     *\n     * @param date The date to get the year for.\n     * @returns The year.\n     */\n    this.getYear = date => {\n      return this.overrides?.getYear?.(date) ?? getYear(date);\n    };\n    /**\n     * Returns the local week number for the given date.\n     *\n     * @param date The date to get the week number for.\n     * @returns The week number.\n     */\n    this.getWeek = (date, options) => {\n      return this.overrides?.getWeek?.(date, options ?? this.options) ?? getWeek(date, options ?? this.options);\n    };\n    /**\n     * Checks if the first date is after the second date.\n     *\n     * @param date The date to compare.\n     * @param dateToCompare The date to compare with.\n     * @returns True if the first date is after the second date.\n     */\n    this.isAfter = (date, dateToCompare) => {\n      return this.overrides?.isAfter?.(date, dateToCompare) ?? isAfter(date, dateToCompare);\n    };\n    /**\n     * Checks if the first date is before the second date.\n     *\n     * @param date The date to compare.\n     * @param dateToCompare The date to compare with.\n     * @returns True if the first date is before the second date.\n     */\n    this.isBefore = (date, dateToCompare) => {\n      return this.overrides?.isBefore?.(date, dateToCompare) ?? isBefore(date, dateToCompare);\n    };\n    /**\n     * Checks if the given value is a Date object.\n     *\n     * @param value The value to check.\n     * @returns True if the value is a Date object.\n     */\n    this.isDate = value => {\n      return this.overrides?.isDate?.(value) ?? isDate(value);\n    };\n    /**\n     * Checks if the given dates are on the same day.\n     *\n     * @param dateLeft The first date to compare.\n     * @param dateRight The second date to compare.\n     * @returns True if the dates are on the same day.\n     */\n    this.isSameDay = (dateLeft, dateRight) => {\n      return this.overrides?.isSameDay?.(dateLeft, dateRight) ?? isSameDay(dateLeft, dateRight);\n    };\n    /**\n     * Checks if the given dates are in the same month.\n     *\n     * @param dateLeft The first date to compare.\n     * @param dateRight The second date to compare.\n     * @returns True if the dates are in the same month.\n     */\n    this.isSameMonth = (dateLeft, dateRight) => {\n      return this.overrides?.isSameMonth?.(dateLeft, dateRight) ?? isSameMonth(dateLeft, dateRight);\n    };\n    /**\n     * Checks if the given dates are in the same year.\n     *\n     * @param dateLeft The first date to compare.\n     * @param dateRight The second date to compare.\n     * @returns True if the dates are in the same year.\n     */\n    this.isSameYear = (dateLeft, dateRight) => {\n      return this.overrides?.isSameYear?.(dateLeft, dateRight) ?? isSameYear(dateLeft, dateRight);\n    };\n    /**\n     * Returns the latest date in the given array of dates.\n     *\n     * @param dates The array of dates to compare.\n     * @returns The latest date.\n     */\n    this.max = dates => {\n      return this.overrides?.max?.(dates) ?? max(dates);\n    };\n    /**\n     * Returns the earliest date in the given array of dates.\n     *\n     * @param dates The array of dates to compare.\n     * @returns The earliest date.\n     */\n    this.min = dates => {\n      return this.overrides?.min?.(dates) ?? min(dates);\n    };\n    /**\n     * Sets the month of the given date.\n     *\n     * @param date The date to set the month on.\n     * @param month The month to set (0-11).\n     * @returns The new date with the month set.\n     */\n    this.setMonth = (date, month) => {\n      return this.overrides?.setMonth?.(date, month) ?? setMonth(date, month);\n    };\n    /**\n     * Sets the year of the given date.\n     *\n     * @param date The date to set the year on.\n     * @param year The year to set.\n     * @returns The new date with the year set.\n     */\n    this.setYear = (date, year) => {\n      return this.overrides?.setYear?.(date, year) ?? setYear(date, year);\n    };\n    /**\n     * Returns the start of the broadcast week for the given date.\n     *\n     * @param date The original date.\n     * @returns The start of the broadcast week.\n     */\n    this.startOfBroadcastWeek = (date, dateLib) => {\n      return this.overrides?.startOfBroadcastWeek?.(date, dateLib ?? this) ?? startOfBroadcastWeek(date, dateLib ?? this);\n    };\n    /**\n     * Returns the start of the day for the given date.\n     *\n     * @param date The original date.\n     * @returns The start of the day.\n     */\n    this.startOfDay = date => {\n      return this.overrides?.startOfDay?.(date) ?? startOfDay(date);\n    };\n    /**\n     * Returns the start of the ISO week for the given date.\n     *\n     * @param date The original date.\n     * @returns The start of the ISO week.\n     */\n    this.startOfISOWeek = date => {\n      return this.overrides?.startOfISOWeek?.(date) ?? startOfISOWeek(date);\n    };\n    /**\n     * Returns the start of the month for the given date.\n     *\n     * @param date The original date.\n     * @returns The start of the month.\n     */\n    this.startOfMonth = date => {\n      return this.overrides?.startOfMonth?.(date) ?? startOfMonth(date);\n    };\n    /**\n     * Returns the start of the week for the given date.\n     *\n     * @param date The original date.\n     * @returns The start of the week.\n     */\n    this.startOfWeek = date => {\n      return this.overrides?.startOfWeek?.(date) ?? startOfWeek(date, this.options);\n    };\n    /**\n     * Returns the start of the year for the given date.\n     *\n     * @param date The original date.\n     * @returns The start of the year.\n     */\n    this.startOfYear = date => {\n      return this.overrides?.startOfYear?.(date) ?? startOfYear(date);\n    };\n    this.options = {\n      locale: enUS,\n      ...options\n    };\n    this.overrides = overrides;\n  }\n  /**\n   * Generate digit map dynamically using Intl.NumberFormat.\n   *\n   * @since 9.5.0\n   */\n  getDigitMap() {\n    const {\n      numerals = \"latn\"\n    } = this.options;\n    // Use Intl.NumberFormat to create a formatter with the specified numbering system\n    const formatter = new Intl.NumberFormat(\"en-US\", {\n      numberingSystem: numerals\n    });\n    // Map Arabic digits (0-9) to the target numerals\n    const digitMap = {};\n    for (let i = 0; i < 10; i++) {\n      digitMap[i.toString()] = formatter.format(i);\n    }\n    return digitMap;\n  }\n  /**\n   * Replace Arabic digits with the target numbering system digits.\n   *\n   * @since 9.5.0\n   */\n  replaceDigits(input) {\n    const digitMap = this.getDigitMap();\n    return input.replace(/\\d/g, digit => digitMap[digit] || digit);\n  }\n  /**\n   * Format number using the custom numbering system.\n   *\n   * @since 9.5.0\n   * @param value The number to format.\n   * @returns The formatted number.\n   */\n  formatNumber(value) {\n    return this.replaceDigits(value.toString());\n  }\n}\n/** The default locale (English). */\nexport { enUS as defaultLocale } from \"date-fns/locale/en-US\";\n/**\n * The default date library with English locale.\n *\n * @since 9.2.0\n */\nexport const defaultDateLib = new DateLib();\n/**\n * @ignore\n * @deprecated Use `defaultDateLib`.\n */\nexport const dateLib = defaultDateLib;","map":{"version":3,"names":["TZDate","addDays","addMonths","addWeeks","addYears","differenceInCalendarDays","differenceInCalendarMonths","eachMonthOfInterval","endOfISOWeek","endOfMonth","endOfWeek","endOfYear","format","getISOWeek","getMonth","getWeek","getYear","isAfter","isBefore","isDate","isSameDay","isSameMonth","isSameYear","max","min","setMonth","setYear","startOfDay","startOfISOWeek","startOfMonth","startOfWeek","startOfYear","enUS","endOfBroadcastWeek","startOfBroadcastWeek","DateLib","constructor","options","overrides","Date","today","timeZone","tz","newDate","year","monthIndex","date","amount","dateLeft","dateRight","interval","dateLib","formatStr","formatted","numerals","replaceDigits","dateToCompare","value","dates","month","locale","getDigitMap","formatter","Intl","NumberFormat","numberingSystem","digitMap","i","toString","input","replace","digit","formatNumber","defaultLocale","defaultDateLib"],"sources":["C:\\Users\\JOSEPH\\Desktop\\web\\node_modules\\react-day-picker\\src\\classes\\DateLib.ts"],"sourcesContent":["import { TZDate } from \"@date-fns/tz\";\nimport {\n  addDays,\n  addMonths,\n  addWeeks,\n  addYears,\n  differenceInCalendarDays,\n  differenceInCalendarMonths,\n  eachMonthOfInterval,\n  endOfISOWeek,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  format,\n  getISOWeek,\n  getMonth,\n  getWeek,\n  getYear,\n  isAfter,\n  isBefore,\n  isDate,\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  max,\n  min,\n  setMonth,\n  setYear,\n  startOfDay,\n  startOfISOWeek,\n  startOfMonth,\n  startOfWeek,\n  startOfYear\n} from \"date-fns\";\nimport type {\n  EndOfWeekOptions,\n  StartOfWeekOptions,\n  FormatOptions as DateFnsFormatOptions,\n  GetWeekOptions,\n  Interval\n} from \"date-fns\";\nimport type { Locale } from \"date-fns/locale\";\nimport { enUS } from \"date-fns/locale/en-US\";\n\nimport { endOfBroadcastWeek } from \"../helpers/endOfBroadcastWeek.js\";\nimport { startOfBroadcastWeek } from \"../helpers/startOfBroadcastWeek.js\";\nimport { Numerals } from \"../types/shared.js\";\n\nexport type { Locale } from \"date-fns/locale\";\nexport type { Month as DateFnsMonth } from \"date-fns\";\n\n/**\n * @ignore\n * @deprecated Use {@link DateLibOptions} instead.\n */\nexport type FormatOptions = DateLibOptions;\n/**\n * @ignore\n * @deprecated Use {@link DateLibOptions} instead.\n */\nexport type LabelOptions = DateLibOptions;\n\n/**\n * The options for the `DateLib` class.\n *\n * Extends `date-fns` [format](https://date-fns.org/docs/format),\n * [startOfWeek](https://date-fns.org/docs/startOfWeek) and\n * [endOfWeek](https://date-fns.org/docs/endOfWeek) options.\n *\n * @since 9.2.0\n */\nexport interface DateLibOptions\n  extends DateFnsFormatOptions,\n    StartOfWeekOptions,\n    EndOfWeekOptions {\n  /** A constructor for the `Date` object. */\n  Date?: typeof Date;\n  /** A locale to use for formatting dates. */\n  locale?: Locale;\n  /**\n   * A time zone to use for dates.\n   *\n   * @since 9.5.0\n   */\n  timeZone?: string;\n  /**\n   * The numbering system to use for formatting numbers.\n   *\n   * @since 9.5.0\n   */\n  numerals?: Numerals;\n}\n\n/**\n * A wrapper class around [date-fns](http://date-fns.org) sharing the same\n * options.\n *\n * @since 9.2.0\n * @example\n *   const dateLib = new DateLib({ locale: es });\n *   const newDate = dateLib.addDays(new Date(), 5);\n */\nexport class DateLib {\n  /** The options for the date library. */\n  readonly options: DateLibOptions;\n\n  /** Overrides for the date library functions. */\n  readonly overrides?: Partial<typeof DateLib.prototype>;\n\n  /**\n   * Creates an instance of DateLib.\n   *\n   * @param options The options for the date library.\n   * @param overrides Overrides for the date library functions.\n   */\n  constructor(\n    options?: DateLibOptions,\n    overrides?: Partial<typeof DateLib.prototype>\n  ) {\n    this.options = { locale: enUS, ...options };\n    this.overrides = overrides;\n  }\n\n  /**\n   * Generate digit map dynamically using Intl.NumberFormat.\n   *\n   * @since 9.5.0\n   */\n  private getDigitMap(): Record<string, string> {\n    const { numerals = \"latn\" } = this.options;\n\n    // Use Intl.NumberFormat to create a formatter with the specified numbering system\n    const formatter = new Intl.NumberFormat(\"en-US\", {\n      numberingSystem: numerals\n    });\n\n    // Map Arabic digits (0-9) to the target numerals\n    const digitMap: Record<string, string> = {};\n    for (let i = 0; i < 10; i++) {\n      digitMap[i.toString()] = formatter.format(i);\n    }\n\n    return digitMap;\n  }\n\n  /**\n   * Replace Arabic digits with the target numbering system digits.\n   *\n   * @since 9.5.0\n   */\n  private replaceDigits(input: string): string {\n    const digitMap = this.getDigitMap();\n    return input.replace(/\\d/g, (digit) => digitMap[digit] || digit);\n  }\n\n  /**\n   * Format number using the custom numbering system.\n   *\n   * @since 9.5.0\n   * @param value The number to format.\n   * @returns The formatted number.\n   */\n  formatNumber(value: number): string {\n    return this.replaceDigits(value.toString());\n  }\n\n  /**\n   * Reference to the built-in Date constructor.\n   *\n   * @deprecated Use `newDate()` or `today()`.\n   */\n  Date: typeof Date = Date;\n\n  /**\n   * Creates a new date object to the today's date.\n   *\n   * @since 9.5.0\n   * @returns The new date object.\n   */\n  today = (): Date => {\n    if (this.overrides?.today) {\n      return this.overrides.today();\n    }\n    if (this.options.timeZone) {\n      return TZDate.tz(this.options.timeZone);\n    }\n    return new this.Date();\n  };\n\n  /**\n   * Creates a new date object with the specified year, month and date.\n   *\n   * @since 9.5.0\n   * @param year The year.\n   * @param monthIndex The month (0-11).\n   * @param date The day of the month.\n   * @returns The new date object.\n   */\n  newDate = (year: number, monthIndex: number, date: number): Date => {\n    if (this.overrides?.newDate) {\n      return this.overrides.newDate(year, monthIndex, date);\n    }\n    if (this.options.timeZone) {\n      return new TZDate(year, monthIndex, date, this.options.timeZone);\n    }\n    return new Date(year, monthIndex, date);\n  };\n\n  /**\n   * Adds the specified number of days to the given date.\n   *\n   * @param date The date to add days to.\n   * @param amount The number of days to add.\n   * @returns The new date with the days added.\n   */\n  addDays = (date: Date, amount: number): Date => {\n    return this.overrides?.addDays?.(date, amount) ?? addDays(date, amount);\n  };\n\n  /**\n   * Adds the specified number of months to the given date.\n   *\n   * @param date The date to add months to.\n   * @param amount The number of months to add.\n   * @returns The new date with the months added.\n   */\n  addMonths = (date: Date, amount: number): Date => {\n    return this.overrides?.addMonths?.(date, amount) ?? addMonths(date, amount);\n  };\n\n  /**\n   * Adds the specified number of weeks to the given date.\n   *\n   * @param date The date to add weeks to.\n   * @param amount The number of weeks to add.\n   * @returns The new date with the weeks added.\n   */\n  addWeeks = (date: Date, amount: number): Date => {\n    return this.overrides?.addWeeks?.(date, amount) ?? addWeeks(date, amount);\n  };\n\n  /**\n   * Adds the specified number of years to the given date.\n   *\n   * @param date The date to add years to.\n   * @param amount The number of years to add.\n   * @returns The new date with the years added.\n   */\n  addYears = (date: Date, amount: number): Date => {\n    return this.overrides?.addYears?.(date, amount) ?? addYears(date, amount);\n  };\n\n  /**\n   * Returns the number of calendar days between the given dates.\n   *\n   * @param dateLeft The later date.\n   * @param dateRight The earlier date.\n   * @returns The number of calendar days between the dates.\n   */\n  differenceInCalendarDays = (dateLeft: Date, dateRight: Date): number => {\n    return (\n      this.overrides?.differenceInCalendarDays?.(dateLeft, dateRight) ??\n      differenceInCalendarDays(dateLeft, dateRight)\n    );\n  };\n\n  /**\n   * Returns the number of calendar months between the given dates.\n   *\n   * @param dateLeft The later date.\n   * @param dateRight The earlier date.\n   * @returns The number of calendar months between the dates.\n   */\n  differenceInCalendarMonths = (dateLeft: Date, dateRight: Date): number => {\n    return (\n      this.overrides?.differenceInCalendarMonths?.(dateLeft, dateRight) ??\n      differenceInCalendarMonths(dateLeft, dateRight)\n    );\n  };\n\n  /**\n   * Returns the months between the given dates.\n   *\n   * @param interval The interval to get the months for.\n   */\n  eachMonthOfInterval = (interval: Interval<Date>): Date[] => {\n    return (\n      this.overrides?.eachMonthOfInterval?.(interval) ??\n      eachMonthOfInterval(interval)\n    );\n  };\n\n  /**\n   * Returns the end of the broadcast week for the given date.\n   *\n   * @param date The original date.\n   * @returns The end of the broadcast week.\n   */\n  endOfBroadcastWeek = (date: Date, dateLib?: DateLib): Date => {\n    return (\n      this.overrides?.endOfBroadcastWeek?.(date, dateLib) ??\n      endOfBroadcastWeek(date, this)\n    );\n  };\n\n  /**\n   * Returns the end of the ISO week for the given date.\n   *\n   * @param date The original date.\n   * @returns The end of the ISO week.\n   */\n  endOfISOWeek = (date: Date): Date => {\n    return this.overrides?.endOfISOWeek?.(date) ?? endOfISOWeek(date);\n  };\n\n  /**\n   * Returns the end of the month for the given date.\n   *\n   * @param date The original date.\n   * @returns The end of the month.\n   */\n  endOfMonth = (date: Date): Date => {\n    return this.overrides?.endOfMonth?.(date) ?? endOfMonth(date);\n  };\n\n  /**\n   * Returns the end of the week for the given date.\n   *\n   * @param date The original date.\n   * @returns The end of the week.\n   */\n  endOfWeek = (date: Date, options?: EndOfWeekOptions<Date>): Date => {\n    return (\n      this.overrides?.endOfWeek?.(date, options ?? this.options) ??\n      endOfWeek(date, options ?? this.options)\n    );\n  };\n\n  /**\n   * Returns the end of the year for the given date.\n   *\n   * @param date The original date.\n   * @returns The end of the year.\n   */\n  endOfYear = (date: Date): Date => {\n    return this.overrides?.endOfYear?.(date) ?? endOfYear(date);\n  };\n\n  /**\n   * Formats the given date using the specified format string.\n   *\n   * @param date The date to format.\n   * @param formatStr The format string.\n   * @returns The formatted date string.\n   */\n  format = (\n    date: Date,\n    formatStr: string,\n    options?: DateFnsFormatOptions\n  ): string => {\n    const formatted =\n      this.overrides?.format?.(date, formatStr, options ?? this.options) ??\n      format(date, formatStr, options ?? this.options);\n\n    if (this.options.numerals && this.options.numerals !== \"latn\") {\n      return this.replaceDigits(formatted);\n    }\n    return formatted;\n  };\n\n  /**\n   * Returns the ISO week number for the given date.\n   *\n   * @param date The date to get the ISO week number for.\n   * @returns The ISO week number.\n   */\n  getISOWeek = (date: Date): number => {\n    return this.overrides?.getISOWeek?.(date) ?? getISOWeek(date);\n  };\n\n  /**\n   * Returns the month of the given date.\n   *\n   * @param date The date to get the month for.\n   * @returns The month.\n   */\n  getMonth = (date: Date): number => {\n    return this.overrides?.getMonth?.(date) ?? getMonth(date);\n  };\n\n  /**\n   * Returns the year of the given date.\n   *\n   * @param date The date to get the year for.\n   * @returns The year.\n   */\n  getYear = (date: Date): number => {\n    return this.overrides?.getYear?.(date) ?? getYear(date);\n  };\n\n  /**\n   * Returns the local week number for the given date.\n   *\n   * @param date The date to get the week number for.\n   * @returns The week number.\n   */\n  getWeek = (date: Date, options?: GetWeekOptions): number => {\n    return (\n      this.overrides?.getWeek?.(date, options ?? this.options) ??\n      getWeek(date, options ?? this.options)\n    );\n  };\n\n  /**\n   * Checks if the first date is after the second date.\n   *\n   * @param date The date to compare.\n   * @param dateToCompare The date to compare with.\n   * @returns True if the first date is after the second date.\n   */\n  isAfter = (date: Date, dateToCompare: Date): boolean => {\n    return (\n      this.overrides?.isAfter?.(date, dateToCompare) ??\n      isAfter(date, dateToCompare)\n    );\n  };\n\n  /**\n   * Checks if the first date is before the second date.\n   *\n   * @param date The date to compare.\n   * @param dateToCompare The date to compare with.\n   * @returns True if the first date is before the second date.\n   */\n  isBefore = (date: Date, dateToCompare: Date): boolean => {\n    return (\n      this.overrides?.isBefore?.(date, dateToCompare) ??\n      isBefore(date, dateToCompare)\n    );\n  };\n\n  /**\n   * Checks if the given value is a Date object.\n   *\n   * @param value The value to check.\n   * @returns True if the value is a Date object.\n   */\n  isDate: (value: unknown) => value is Date = (value): value is Date => {\n    return this.overrides?.isDate?.(value) ?? isDate(value);\n  };\n\n  /**\n   * Checks if the given dates are on the same day.\n   *\n   * @param dateLeft The first date to compare.\n   * @param dateRight The second date to compare.\n   * @returns True if the dates are on the same day.\n   */\n  isSameDay = (dateLeft: Date, dateRight: Date): boolean => {\n    return (\n      this.overrides?.isSameDay?.(dateLeft, dateRight) ??\n      isSameDay(dateLeft, dateRight)\n    );\n  };\n\n  /**\n   * Checks if the given dates are in the same month.\n   *\n   * @param dateLeft The first date to compare.\n   * @param dateRight The second date to compare.\n   * @returns True if the dates are in the same month.\n   */\n  isSameMonth = (dateLeft: Date, dateRight: Date): boolean => {\n    return (\n      this.overrides?.isSameMonth?.(dateLeft, dateRight) ??\n      isSameMonth(dateLeft, dateRight)\n    );\n  };\n\n  /**\n   * Checks if the given dates are in the same year.\n   *\n   * @param dateLeft The first date to compare.\n   * @param dateRight The second date to compare.\n   * @returns True if the dates are in the same year.\n   */\n  isSameYear = (dateLeft: Date, dateRight: Date): boolean => {\n    return (\n      this.overrides?.isSameYear?.(dateLeft, dateRight) ??\n      isSameYear(dateLeft, dateRight)\n    );\n  };\n\n  /**\n   * Returns the latest date in the given array of dates.\n   *\n   * @param dates The array of dates to compare.\n   * @returns The latest date.\n   */\n  max = (dates: Date[]): Date => {\n    return this.overrides?.max?.(dates) ?? max(dates);\n  };\n\n  /**\n   * Returns the earliest date in the given array of dates.\n   *\n   * @param dates The array of dates to compare.\n   * @returns The earliest date.\n   */\n  min = (dates: Date[]): Date => {\n    return this.overrides?.min?.(dates) ?? min(dates);\n  };\n\n  /**\n   * Sets the month of the given date.\n   *\n   * @param date The date to set the month on.\n   * @param month The month to set (0-11).\n   * @returns The new date with the month set.\n   */\n  setMonth = (date: Date, month: number): Date => {\n    return this.overrides?.setMonth?.(date, month) ?? setMonth(date, month);\n  };\n\n  /**\n   * Sets the year of the given date.\n   *\n   * @param date The date to set the year on.\n   * @param year The year to set.\n   * @returns The new date with the year set.\n   */\n  setYear = (date: Date, year: number): Date => {\n    return this.overrides?.setYear?.(date, year) ?? setYear(date, year);\n  };\n\n  /**\n   * Returns the start of the broadcast week for the given date.\n   *\n   * @param date The original date.\n   * @returns The start of the broadcast week.\n   */\n  startOfBroadcastWeek = (date: Date, dateLib?: DateLib): Date => {\n    return (\n      this.overrides?.startOfBroadcastWeek?.(date, dateLib ?? this) ??\n      startOfBroadcastWeek(date, dateLib ?? this)\n    );\n  };\n\n  /**\n   * Returns the start of the day for the given date.\n   *\n   * @param date The original date.\n   * @returns The start of the day.\n   */\n  startOfDay = (date: Date): Date => {\n    return this.overrides?.startOfDay?.(date) ?? startOfDay(date);\n  };\n\n  /**\n   * Returns the start of the ISO week for the given date.\n   *\n   * @param date The original date.\n   * @returns The start of the ISO week.\n   */\n  startOfISOWeek = (date: Date): Date => {\n    return this.overrides?.startOfISOWeek?.(date) ?? startOfISOWeek(date);\n  };\n\n  /**\n   * Returns the start of the month for the given date.\n   *\n   * @param date The original date.\n   * @returns The start of the month.\n   */\n  startOfMonth = (date: Date): Date => {\n    return this.overrides?.startOfMonth?.(date) ?? startOfMonth(date);\n  };\n\n  /**\n   * Returns the start of the week for the given date.\n   *\n   * @param date The original date.\n   * @returns The start of the week.\n   */\n  startOfWeek = (date: Date): Date => {\n    return (\n      this.overrides?.startOfWeek?.(date) ?? startOfWeek(date, this.options)\n    );\n  };\n\n  /**\n   * Returns the start of the year for the given date.\n   *\n   * @param date The original date.\n   * @returns The start of the year.\n   */\n  startOfYear = (date: Date): Date => {\n    return this.overrides?.startOfYear?.(date) ?? startOfYear(date);\n  };\n}\n/** The default locale (English). */\nexport { enUS as defaultLocale } from \"date-fns/locale/en-US\";\n\n/**\n * The default date library with English locale.\n *\n * @since 9.2.0\n */\nexport const defaultDateLib = new DateLib();\n\n/**\n * @ignore\n * @deprecated Use `defaultDateLib`.\n */\nexport const dateLib = defaultDateLib;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}