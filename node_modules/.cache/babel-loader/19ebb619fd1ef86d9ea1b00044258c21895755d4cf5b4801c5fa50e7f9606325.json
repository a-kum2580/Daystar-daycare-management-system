{"ast":null,"code":"import { useEffect } from \"react\";\nimport { getDates } from \"./helpers/getDates.js\";\nimport { getDays } from \"./helpers/getDays.js\";\nimport { getDisplayMonths } from \"./helpers/getDisplayMonths.js\";\nimport { getInitialMonth } from \"./helpers/getInitialMonth.js\";\nimport { getMonths } from \"./helpers/getMonths.js\";\nimport { getNavMonths } from \"./helpers/getNavMonth.js\";\nimport { getNextMonth } from \"./helpers/getNextMonth.js\";\nimport { getPreviousMonth } from \"./helpers/getPreviousMonth.js\";\nimport { getWeeks } from \"./helpers/getWeeks.js\";\nimport { useControlledValue } from \"./helpers/useControlledValue.js\";\n/** @private */\nexport function useCalendar(props, dateLib) {\n  const [navStart, navEnd] = getNavMonths(props, dateLib);\n  const {\n    startOfMonth,\n    endOfMonth\n  } = dateLib;\n  const initialMonth = getInitialMonth(props, dateLib);\n  const [firstMonth, setFirstMonth] = useControlledValue(initialMonth,\n  // initialMonth is always computed from props.month if provided\n  props.month ? initialMonth : undefined);\n  useEffect(() => {\n    const newInitialMonth = getInitialMonth(props, dateLib);\n    setFirstMonth(newInitialMonth);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.timeZone]);\n  /** The months displayed in the calendar. */\n  const displayMonths = getDisplayMonths(firstMonth, navEnd, props, dateLib);\n  /** The dates displayed in the calendar. */\n  const dates = getDates(displayMonths, props.endMonth ? endOfMonth(props.endMonth) : undefined, props, dateLib);\n  /** The Months displayed in the calendar. */\n  const months = getMonths(displayMonths, dates, props, dateLib);\n  /** The Weeks displayed in the calendar. */\n  const weeks = getWeeks(months);\n  /** The Days displayed in the calendar. */\n  const days = getDays(months);\n  const previousMonth = getPreviousMonth(firstMonth, navStart, props, dateLib);\n  const nextMonth = getNextMonth(firstMonth, navEnd, props, dateLib);\n  const {\n    disableNavigation,\n    onMonthChange\n  } = props;\n  const isDayInCalendar = day => weeks.some(week => week.days.some(d => d.isEqualTo(day)));\n  const goToMonth = date => {\n    if (disableNavigation) {\n      return;\n    }\n    let newMonth = startOfMonth(date);\n    // if month is before start, use the first month instead\n    if (navStart && newMonth < startOfMonth(navStart)) {\n      newMonth = startOfMonth(navStart);\n    }\n    // if month is after endMonth, use the last month instead\n    if (navEnd && newMonth > startOfMonth(navEnd)) {\n      newMonth = startOfMonth(navEnd);\n    }\n    setFirstMonth(newMonth);\n    onMonthChange?.(newMonth);\n  };\n  const goToDay = day => {\n    // is this check necessary?\n    if (isDayInCalendar(day)) {\n      return;\n    }\n    goToMonth(day.date);\n  };\n  const calendar = {\n    months,\n    weeks,\n    days,\n    navStart,\n    navEnd,\n    previousMonth,\n    nextMonth,\n    goToMonth,\n    goToDay\n  };\n  return calendar;\n}","map":{"version":3,"names":["useEffect","getDates","getDays","getDisplayMonths","getInitialMonth","getMonths","getNavMonths","getNextMonth","getPreviousMonth","getWeeks","useControlledValue","useCalendar","props","dateLib","navStart","navEnd","startOfMonth","endOfMonth","initialMonth","firstMonth","setFirstMonth","month","undefined","newInitialMonth","timeZone","displayMonths","dates","endMonth","months","weeks","days","previousMonth","nextMonth","disableNavigation","onMonthChange","isDayInCalendar","day","some","week","d","isEqualTo","goToMonth","date","newMonth","goToDay","calendar"],"sources":["C:/Users/JOSEPH/Desktop/web/node_modules/react-day-picker/dist/esm/useCalendar.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { getDates } from \"./helpers/getDates.js\";\nimport { getDays } from \"./helpers/getDays.js\";\nimport { getDisplayMonths } from \"./helpers/getDisplayMonths.js\";\nimport { getInitialMonth } from \"./helpers/getInitialMonth.js\";\nimport { getMonths } from \"./helpers/getMonths.js\";\nimport { getNavMonths } from \"./helpers/getNavMonth.js\";\nimport { getNextMonth } from \"./helpers/getNextMonth.js\";\nimport { getPreviousMonth } from \"./helpers/getPreviousMonth.js\";\nimport { getWeeks } from \"./helpers/getWeeks.js\";\nimport { useControlledValue } from \"./helpers/useControlledValue.js\";\n/** @private */\nexport function useCalendar(props, dateLib) {\n    const [navStart, navEnd] = getNavMonths(props, dateLib);\n    const { startOfMonth, endOfMonth } = dateLib;\n    const initialMonth = getInitialMonth(props, dateLib);\n    const [firstMonth, setFirstMonth] = useControlledValue(initialMonth, \n    // initialMonth is always computed from props.month if provided\n    props.month ? initialMonth : undefined);\n    useEffect(() => {\n        const newInitialMonth = getInitialMonth(props, dateLib);\n        setFirstMonth(newInitialMonth);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.timeZone]);\n    /** The months displayed in the calendar. */\n    const displayMonths = getDisplayMonths(firstMonth, navEnd, props, dateLib);\n    /** The dates displayed in the calendar. */\n    const dates = getDates(displayMonths, props.endMonth ? endOfMonth(props.endMonth) : undefined, props, dateLib);\n    /** The Months displayed in the calendar. */\n    const months = getMonths(displayMonths, dates, props, dateLib);\n    /** The Weeks displayed in the calendar. */\n    const weeks = getWeeks(months);\n    /** The Days displayed in the calendar. */\n    const days = getDays(months);\n    const previousMonth = getPreviousMonth(firstMonth, navStart, props, dateLib);\n    const nextMonth = getNextMonth(firstMonth, navEnd, props, dateLib);\n    const { disableNavigation, onMonthChange } = props;\n    const isDayInCalendar = (day) => weeks.some((week) => week.days.some((d) => d.isEqualTo(day)));\n    const goToMonth = (date) => {\n        if (disableNavigation) {\n            return;\n        }\n        let newMonth = startOfMonth(date);\n        // if month is before start, use the first month instead\n        if (navStart && newMonth < startOfMonth(navStart)) {\n            newMonth = startOfMonth(navStart);\n        }\n        // if month is after endMonth, use the last month instead\n        if (navEnd && newMonth > startOfMonth(navEnd)) {\n            newMonth = startOfMonth(navEnd);\n        }\n        setFirstMonth(newMonth);\n        onMonthChange?.(newMonth);\n    };\n    const goToDay = (day) => {\n        // is this check necessary?\n        if (isDayInCalendar(day)) {\n            return;\n        }\n        goToMonth(day.date);\n    };\n    const calendar = {\n        months,\n        weeks,\n        days,\n        navStart,\n        navEnd,\n        previousMonth,\n        nextMonth,\n        goToMonth,\n        goToDay\n    };\n    return calendar;\n}\n//# sourceMappingURL=useCalendar.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}