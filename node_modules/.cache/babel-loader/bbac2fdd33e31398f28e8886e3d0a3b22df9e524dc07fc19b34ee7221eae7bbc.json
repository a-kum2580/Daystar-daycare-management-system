{"ast":null,"code":"import { useState } from \"react\";\n/**\n * A custom hook for managing both controlled and uncontrolled component states.\n *\n * @example\n *   // Uncontrolled usage\n *   const [value, setValue] = useControlledValue(0, undefined);\n *\n *   // Controlled usage\n *   const [value, setValue] = useControlledValue(0, props.value);\n *\n * @template T - The type of the value.\n * @param {T} defaultValue - The initial value for the uncontrolled state.\n * @param {T | undefined} controlledValue - The value for the controlled state.\n *   If undefined, the component will use the uncontrolled state.\n * @returns {[T, DispatchStateAction<T>]} - Returns a tuple where the first\n *   element is the current value (either controlled or uncontrolled) and the\n *   second element is a setter function to update the value.\n */\nexport function useControlledValue(defaultValue, controlledValue) {\n  const [uncontrolledValue, setValue] = useState(defaultValue);\n  const value = controlledValue === undefined ? uncontrolledValue : controlledValue;\n  return [value, setValue];\n}","map":{"version":3,"names":["useState","useControlledValue","defaultValue","controlledValue","uncontrolledValue","setValue","value","undefined"],"sources":["C:\\Users\\JOSEPH\\Desktop\\web\\node_modules\\react-day-picker\\src\\helpers\\useControlledValue.ts"],"sourcesContent":["import { useState } from \"react\";\n\nexport type DispatchStateAction<T> = React.Dispatch<React.SetStateAction<T>>;\n\n/**\n * A custom hook for managing both controlled and uncontrolled component states.\n *\n * @example\n *   // Uncontrolled usage\n *   const [value, setValue] = useControlledValue(0, undefined);\n *\n *   // Controlled usage\n *   const [value, setValue] = useControlledValue(0, props.value);\n *\n * @template T - The type of the value.\n * @param {T} defaultValue - The initial value for the uncontrolled state.\n * @param {T | undefined} controlledValue - The value for the controlled state.\n *   If undefined, the component will use the uncontrolled state.\n * @returns {[T, DispatchStateAction<T>]} - Returns a tuple where the first\n *   element is the current value (either controlled or uncontrolled) and the\n *   second element is a setter function to update the value.\n */\nexport function useControlledValue<T>(\n  defaultValue: T,\n  controlledValue: T | undefined\n): [T, DispatchStateAction<T>] {\n  const [uncontrolledValue, setValue] = useState(defaultValue);\n\n  const value =\n    controlledValue === undefined ? uncontrolledValue : controlledValue;\n\n  return [value, setValue] as [T, DispatchStateAction<T>];\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAIhC;;;;;;;;;;;;;;;;;;AAkBA,OAAM,SAAUC,kBAAkBA,CAChCC,YAAe,EACfC,eAA8B;EAE9B,MAAM,CAACC,iBAAiB,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAACE,YAAY,CAAC;EAE5D,MAAMI,KAAK,GACTH,eAAe,KAAKI,SAAS,GAAGH,iBAAiB,GAAGD,eAAe;EAErE,OAAO,CAACG,KAAK,EAAED,QAAQ,CAAgC;AACzD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}