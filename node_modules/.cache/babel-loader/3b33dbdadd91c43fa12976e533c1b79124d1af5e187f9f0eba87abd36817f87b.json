{"ast":null,"code":"import { DayFlag } from \"../UI.js\";\nexport function calculateFocusTarget(days, getModifiers, isSelected, lastFocused) {\n  let focusTarget;\n  let index = 0;\n  let found = false;\n  while (index < days.length && !found) {\n    const day = days[index];\n    const modifiers = getModifiers(day);\n    if (!modifiers[DayFlag.disabled] && !modifiers[DayFlag.hidden] && !modifiers[DayFlag.outside]) {\n      if (modifiers[DayFlag.focused]) {\n        focusTarget = day;\n        found = true;\n      } else if (lastFocused?.isEqualTo(day)) {\n        focusTarget = day;\n        found = true;\n      } else if (isSelected(day.date)) {\n        focusTarget = day;\n        found = true;\n      } else if (modifiers[DayFlag.today]) {\n        focusTarget = day;\n        found = true;\n      }\n    }\n    index++;\n  }\n  if (!focusTarget) {\n    // return the first day that is focusable\n    focusTarget = days.find(day => {\n      const m = getModifiers(day);\n      return !m[DayFlag.disabled] && !m[DayFlag.hidden] && !m[DayFlag.outside];\n    });\n  }\n  return focusTarget;\n}","map":{"version":3,"names":["DayFlag","calculateFocusTarget","days","getModifiers","isSelected","lastFocused","focusTarget","index","found","length","day","modifiers","disabled","hidden","outside","focused","isEqualTo","date","today","find","m"],"sources":["C:\\Users\\JOSEPH\\Desktop\\web\\node_modules\\react-day-picker\\src\\helpers\\calculateFocusTarget.ts"],"sourcesContent":["import { DayFlag } from \"../UI.js\";\nimport type { CalendarDay } from \"../classes/index.js\";\nimport type { Modifiers } from \"../types/index.js\";\n\nexport function calculateFocusTarget(\n  days: CalendarDay[],\n  getModifiers: (day: CalendarDay) => Modifiers,\n  isSelected: (date: Date) => boolean,\n  lastFocused: CalendarDay | undefined\n) {\n  let focusTarget: CalendarDay | undefined;\n\n  let index = 0;\n  let found = false;\n\n  while (index < days.length && !found) {\n    const day = days[index];\n    const modifiers = getModifiers(day);\n\n    if (\n      !modifiers[DayFlag.disabled] &&\n      !modifiers[DayFlag.hidden] &&\n      !modifiers[DayFlag.outside]\n    ) {\n      if (modifiers[DayFlag.focused]) {\n        focusTarget = day;\n        found = true;\n      } else if (lastFocused?.isEqualTo(day)) {\n        focusTarget = day;\n        found = true;\n      } else if (isSelected(day.date)) {\n        focusTarget = day;\n        found = true;\n      } else if (modifiers[DayFlag.today]) {\n        focusTarget = day;\n        found = true;\n      }\n    }\n\n    index++;\n  }\n\n  if (!focusTarget) {\n    // return the first day that is focusable\n    focusTarget = days.find((day) => {\n      const m = getModifiers(day);\n      return !m[DayFlag.disabled] && !m[DayFlag.hidden] && !m[DayFlag.outside];\n    });\n  }\n  return focusTarget;\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,UAAU;AAIlC,OAAM,SAAUC,oBAAoBA,CAClCC,IAAmB,EACnBC,YAA6C,EAC7CC,UAAmC,EACnCC,WAAoC;EAEpC,IAAIC,WAAoC;EAExC,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,GAAG,KAAK;EAEjB,OAAOD,KAAK,GAAGL,IAAI,CAACO,MAAM,IAAI,CAACD,KAAK,EAAE;IACpC,MAAME,GAAG,GAAGR,IAAI,CAACK,KAAK,CAAC;IACvB,MAAMI,SAAS,GAAGR,YAAY,CAACO,GAAG,CAAC;IAEnC,IACE,CAACC,SAAS,CAACX,OAAO,CAACY,QAAQ,CAAC,IAC5B,CAACD,SAAS,CAACX,OAAO,CAACa,MAAM,CAAC,IAC1B,CAACF,SAAS,CAACX,OAAO,CAACc,OAAO,CAAC,EAC3B;MACA,IAAIH,SAAS,CAACX,OAAO,CAACe,OAAO,CAAC,EAAE;QAC9BT,WAAW,GAAGI,GAAG;QACjBF,KAAK,GAAG,IAAI;MACd,CAAC,MAAM,IAAIH,WAAW,EAAEW,SAAS,CAACN,GAAG,CAAC,EAAE;QACtCJ,WAAW,GAAGI,GAAG;QACjBF,KAAK,GAAG,IAAI;MACd,CAAC,MAAM,IAAIJ,UAAU,CAACM,GAAG,CAACO,IAAI,CAAC,EAAE;QAC/BX,WAAW,GAAGI,GAAG;QACjBF,KAAK,GAAG,IAAI;MACd,CAAC,MAAM,IAAIG,SAAS,CAACX,OAAO,CAACkB,KAAK,CAAC,EAAE;QACnCZ,WAAW,GAAGI,GAAG;QACjBF,KAAK,GAAG,IAAI;MACd;IACF;IAEAD,KAAK,EAAE;EACT;EAEA,IAAI,CAACD,WAAW,EAAE;IAChB;IACAA,WAAW,GAAGJ,IAAI,CAACiB,IAAI,CAAET,GAAG,IAAI;MAC9B,MAAMU,CAAC,GAAGjB,YAAY,CAACO,GAAG,CAAC;MAC3B,OAAO,CAACU,CAAC,CAACpB,OAAO,CAACY,QAAQ,CAAC,IAAI,CAACQ,CAAC,CAACpB,OAAO,CAACa,MAAM,CAAC,IAAI,CAACO,CAAC,CAACpB,OAAO,CAACc,OAAO,CAAC;IAC1E,CAAC,CAAC;EACJ;EACA,OAAOR,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}